# models/admin.py
import uuid
from sqlalchemy import Column, String
from sqlalchemy.dialects.postgresql import UUID
from db.base import Base

class AdminUser(Base):
    __tablename__ = "admin_users"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    email = Column(String, unique=True, nullable=False)
    password = Column(String, nullable=False)  # Hashed password


#models/category.py
import uuid
from sqlalchemy import Column, String
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from db.base import Base

class MainCategory(Base):
    __tablename__ = "main_categories"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    name = Column(String(50), unique=True, nullable=False)
    #relationship with sub-categories
    sub_categories = relationship("SubCategory", back_populates="main_category", cascade="all, delete")


#models/subcategory.py

import uuid
from sqlalchemy import Column, String, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from db.base import Base


class SubCategory(Base):
    __tablename__ = "sub_categories"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    name = Column(String(50), nullable=False)
    main_category_id = Column(UUID(as_uuid=True), ForeignKey("main_categories.id"), nullable=False)
    main_category = relationship("MainCategory", back_populates="sub_categories")
    #each sub category can have many sub-sub-categories
    sub_group = relationship("SubGroup", back_populates="sub_category", cascade="all, delete")


#models/subgroup.py

import uuid
from sqlalchemy import Column, String, ForeignKey
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from db.base import Base

class SubGroup(Base):
    __tablename__ = "sub_group"
    id = Column(UUID(as_uuid=True), primary_key=True, nullable=False, default=uuid.uuid4)
    name = Column(String(50), nullable=False)
    sub_category_id = Column(UUID(as_uuid=True), ForeignKey("sub_categories.id"), nullable=False)
    sub_category = relationship("SubCategory", back_populates="sub_group")
    #Each sub-sub-category has many products.
    products = relationship("Product", back_populates="sub_group", cascade="all, delete")

# models/order.py

import uuid
from sqlalchemy import Column, String, ForeignKey, Float, JSON, DateTime, Integer, Enum as SQLEnum
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from db.base import Base
from enum import Enum

class OrderStatus(str, Enum):
    pending = "pending"
    processing = "processing"
    shipped = "shipped"
    delivered = "delivered"
    cancelled = "cancelled"

class Order(Base):
    __tablename__ = "orders"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    customer = Column(JSON, nullable=False)  # Stores customer info as JSON
    subtotal = Column(Float, nullable=False)
    tax = Column(Float, nullable=False)
    shipping = Column(Float, nullable=False)
    total = Column(Float, nullable=False)
    payment_method = Column(String, nullable=False)
    order_date = Column(DateTime, nullable=False)
    status = Column(SQLEnum(OrderStatus), default=OrderStatus.pending, nullable=False)
    items = relationship("OrderItem", back_populates="order", cascade="all, delete")

class OrderItem(Base):
    __tablename__ = "order_items"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    order_id = Column(UUID(as_uuid=True), ForeignKey("orders.id"), nullable=False)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id"), nullable=False)
    name = Column(String, nullable=False)
    price = Column(Float, nullable=False)
    quantity = Column(Integer, nullable=False)
    color = Column(String, nullable=False)
    size = Column(Float, nullable=False)
    image = Column(String, nullable=False)
    order = relationship("Order", back_populates="items")
    product = relationship("Product")



#models/product.py
import uuid
from sqlalchemy import Column, String, ForeignKey, Float, JSON, Text
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from db.base import Base

class Product(Base):
    __tablename__ = "products"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, nullable=False)
    title = Column(String(100), nullable=False)
    description = Column(Text)
    price = Column(Float, nullable=False)
    main_category_id = Column(UUID(as_uuid=True), ForeignKey("main_categories.id"), nullable=False)
    sub_category_id = Column(UUID(as_uuid=True), ForeignKey("sub_categories.id"), nullable=False)
    sub_group_id = Column(UUID(as_uuid=True), ForeignKey("sub_group.id"), nullable=False)
    colors = Column(JSON, default=list)       # e.g. ["Red", "Blue", ...]
    sizes = Column(JSON, default=list)        # e.g. [6, 6.5, 7, ...]
    assets = Column(JSON, default=list)       # list of image/video URLs

    main_category = relationship("MainCategory")
    sub_category = relationship("SubCategory")
    sub_group = relationship("SubGroup", back_populates="products")
