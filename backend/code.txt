from sqlalchemy.orm import Session
from .models import MainCategory, SubCategory, SubSubCategory
from uuid import UUID
from sqlalchemy.exc import NoResultFound

def add_main_category(db:Session, name: str):
    new_main_category = MainCategory(name=name)
    db.add(new_main_category)
    db.commit()
    db.refresh(new_main_category)
    return new_main_category

def get_main_categories(db: Session):
    return db.query(MainCategory).all()

def update_category(db: Session, category_id: UUID, name:str):
    category = db.query(MainCategory).filter(MainCategory.id == category_id).first()
    if not category:
        raise NoResultFound("Category not found")
    category.name = name
    db.commit()
    db.refresh(category)
    return category

def delete_category(category_id: UUID, db:Session):
    category = db.query(MainCategory).filter(category_id == MainCategory.id).first()
    if not category:
        raise NoResultFound("Category not found")
    db.delete(category)
    db.commit()
    

def add_sub_category(db:Session, name: str, main_category_id):
    new_sub_category = SubCategory(name=name, main_category_id = main_category_id)
    db.add(new_sub_category)
    db.commit()
    db.refresh(new_sub_category)
    return new_sub_category
    
def get_all_subcategories(db:Session):
    subcategories = db.query(SubCategory).all()
    return subcategories

def update_sub_category(db: Session, sub_category_id: UUID, name: str):
    sub_category = db.query(SubCategory).filter(SubCategory.id == sub_category_id).first()
    if not sub_category:
        raise NoResultFound("SubCategory not found")
    sub_category.name = name
    db.commit()
    db.refresh(sub_category)
    return sub_category

def delete_sub_category(db: Session, sub_category_id: UUID):
    sub_category = db.query(SubCategory).filter(SubCategory.id == sub_category_id).first()
    if not sub_category:
        raise NoResultFound("SubCategory not found")
    db.delete(sub_category)
    db.commit()

def add_sub_sub_category(db:Session, name:str, sub_category_id):
    new_sub_sub_category = SubSubCategory(name=name, sub_category_id = sub_category_id)
    db.add(new_sub_sub_category)
    db.commit()
    db.refresh(new_sub_sub_category)
    return new_sub_sub_category

def get_all_sub_sub_categories(db:Session):
    sub_sub_categories = db.query(SubSubCategory).all()
    return sub_sub_categories

def update_sub_sub_category(db: Session, sub_sub_category_id: UUID, name: str):
    sub_sub_category = db.query(SubSubCategory).filter(SubSubCategory.id == sub_sub_category_id).first()
    if not sub_sub_category:
        raise NoResultFound("SubSubCategory not found")
    sub_sub_category.name = name
    db.commit()
    db.refresh(sub_sub_category)
    return sub_sub_category

def delete_sub_sub_category(db: Session, sub_sub_category_id: UUID):
    sub_sub_category = db.query(SubSubCategory).filter(SubSubCategory.id == sub_sub_category_id).first()
    if not sub_sub_category:
        raise NoResultFound("SubSubCategory not found")
    db.delete(sub_sub_category)
    db.commit()

def get_categories(db: Session):
    # Return a nested structure representing the full category hierarchy.
    main_categories = db.query(MainCategory).all()
    result = []
    for main in main_categories:
        sub_cats = []
        for sub in main.sub_categories:
            sub_subs = [{"id": str(sub_sub.id), "name": sub_sub.name} for sub_sub in sub.sub_sub_categories]
            sub_cats.append({"id": str(sub.id), "name": sub.name, "sub_sub_categories": sub_subs})
        result.append({"id": str(main.id), "name": main.name, "sub_categories": sub_cats})
    return result


--- routes.py

#or views.py
from uuid import UUID
from fastapi import APIRouter, HTTPException, Depends, status
from sqlalchemy.orm import Session
from pydantic import BaseModel, ConfigDict
from database import get_db
from . import service as service
from typing import List
from .schemas import  SubCategoryOut, SubSubCategoryOut, CategoryOut, SubCategoryCreate, SubSubCategoryCreate, CategoryCreate, MainCategoryOnlyOut

router = APIRouter()

@router.post("/add-category", response_model=dict)
def add_category(category: CategoryCreate, db:Session = Depends(get_db)):
    try:
        new_category = service.add_main_category(db, category.name)
        return {"id": str(new_category.id), "name": new_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@router.get("/get-categories", response_model=List[MainCategoryOnlyOut])
def get__categories(db:Session = Depends(get_db)):
    try:
        categories = service.get_main_categories(db)
        return categories
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@router.get("/get-all-categories", response_model=List[CategoryOut])
def get_categories(db:Session = Depends(get_db)):
    try:
        categories = service.get_main_categories(db)
        return categories
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.put("/update-category/{category_id}", response_model=dict)
def update_category(category_id: UUID, category: CategoryCreate, db:Session = Depends(get_db)):
    try:
        updated_category = service.update_category(db, category_id, category.name)
        return {"id": str(updated_category.id), "name": updated_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.delete("/delete-category/{category_id}", response_model=dict)
def delete_category(category_id: UUID, db: Session = Depends(get_db)):
    try:
        service.delete_category(db, category_id)
        return {"message": f"Category {category_id} deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/add-subcategory", response_model=dict)
def add_sub_category(sub_category: SubCategoryCreate, db: Session = Depends(get_db)):
    try:
        new_sub_category = service.add_sub_category(db, sub_category.name, sub_category.main_category_id)
        return {"id": str(new_sub_category.id), "name": new_sub_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@router.get("/get-all-subcategories/", response_model=List[SubCategoryOut])
def get_sub_categories(db:Session = Depends(get_db)):
    try:
        sub_categories = service.get_all_subcategories(db)
        return sub_categories
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
    
@router.put("/update-subcategory/{sub_category_id}", response_model=dict)
def update_sub_category(sub_category_id: UUID, sub_category: SubCategoryCreate, db: Session = Depends(get_db)):
    try:
        updated_sub_category = service.update_sub_category(db, sub_category_id, sub_category.name)
        return {"id": str(updated_sub_category.id), "name": updated_sub_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.delete("/delete-subcategory/{sub_category_id}", response_model=dict)
def delete_sub_category(sub_category_id: UUID, db: Session = Depends(get_db)):
    try:
        service.delete_sub_category(db, sub_category_id)
        return {"message": f"SubCategory {sub_category_id} deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.post("/add-sub-subcategory", response_model=dict)
def add_sub_sub_category(sub_sub_category: SubSubCategoryCreate, db: Session = Depends(get_db)):
    try:
        new_sub_sub_category = service.add_sub_sub_category(db, sub_sub_category.name, sub_sub_category.sub_category_id)
        return {"id": str(new_sub_sub_category.id), "name": new_sub_sub_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.get("/get-all-sub-subcategories", response_model=List[SubSubCategoryOut])
def get_sub_sub_categories(db: Session = Depends(get_db)):
    try:
        sub_sub_categories = service.get_all_sub_sub_categories(db)
        return sub_sub_categories
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.put("/update-sub-subcategory/{sub_sub_category_id}", response_model=dict)
def update_sub_sub_category(sub_sub_category_id: UUID, sub_sub_category: SubSubCategoryCreate, db: Session = Depends(get_db)):
    try:
        updated_sub_sub_category = service.update_sub_sub_category(db, sub_sub_category_id, sub_sub_category.name)
        return {"id": str(updated_sub_sub_category.id), "name": updated_sub_sub_category.name}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@router.delete("/delete-sub-subcategory/{sub_sub_category_id}", response_model=dict,  tags=["SubSubCategory"])
def delete_sub_sub_category(sub_sub_category_id: UUID, db: Session = Depends(get_db)):
    try:
        service.delete_sub_sub_category(db, sub_sub_category_id)
        return {"message": f"SubSubCategory {sub_sub_category_id} deleted successfully"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
